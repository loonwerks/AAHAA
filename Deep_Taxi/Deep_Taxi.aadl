package Deep_Taxi
public
	
	with Base_Types;
	with AAHAA_Properties;
	
	data Command
	end Command;
	
	data implementation Command.Impl
		subcomponents
			Heading: data Base_Types::Float;
			Speed: data Base_Types::Integer;
	end Command.Impl;
	
	system Camera
		features
			Video: out event data port;
	end Camera;
	
	system implementation Camera.Impl
	end Camera.Impl;
	
	
	system IRS
		features
			Heading: out event data port Base_Types::Float;
			CTE: out event data port Base_Types::Float;
	end IRS;
	
	system implementation IRS.Impl
	end IRS.Impl;
	
	
	system Deep_Taxi_CNN
		features
			Video: in event data port;
			Raw_CTE: out event data port Base_Types::Float;
			Raw_Heading: out event data port Base_Types::Float;
		properties
			AAHAA_Properties::Component_Type => LEC;
		annex resolute {**
			-- Systems containing LECs must provide specific assurances
			prove (LEC_Assurance(this))
		**};
	end Deep_Taxi_CNN;
	
	system implementation Deep_Taxi_CNN.Impl
	end Deep_Taxi_CNN.Impl;

	
	system DSP_Smoother
		features
			Raw_CTE: in event data port Base_Types::Float;
			Raw_Heading: in event data port Base_Types::Float;
			Smoothed_CTE: out event data port Base_Types::Float;
			Smoothed_Heading: out event data port Base_Types::Float;
	end DSP_Smoother;
	
	system implementation DSP_Smoother.Impl
	end DSP_Smoother.Impl;
	
	
	system Monitor
		features
			Actual_Heading: in event data port Base_Types::Float;
			Estimated_Heading: in event data port Base_Types::Float;
			Actual_CTE: in event data port Base_Types::Float;
			Estimated_CTE: in event data port Base_Types::Float;
			Alert: out event data port Base_Types::Boolean;
		properties
			AAHAA_Properties::Component_Type => MONITOR;
		annex agree {**
			guarantee Monitor_Condition "Alert when monitor condition deviates" : if MONITOR_CONDITION(Actual_Heading, Estimated_Heading, Actual_CTE, Estimated_CTE) then Alert = false else Alert = true;
		**};
		annex resolute {**
			-- provably correct synthesis of high-assurance monitor
			prove (High_Assurance_Monitor(this, "Monitor_Condition"))
		**};
	end Monitor;
	
	
	system implementation Monitor.Impl
	end Monitor.Impl;
	
	
	system Controller
		features
			Heading: in event data port Base_Types::Float;
			CTE: in event data port Base_Types::Float;
			Control_Command: out event data port Command.Impl;
		properties
			AAHAA_Properties::Component_Type => CONTROLLER;
		annex agree {**
--			Controller cannot make any guarantees on command heading because input is coming from the DNN.
--			If we could validate assumptions on input, there wouldn't be a need for this project.
			guarantee "Speed will always be greater than zero" : Control_Command.Speed > 0;
		**};
	end Controller;
	
	
	system implementation Controller.Impl
	end Controller.Impl;
	
	
	system Safety_Controller
		features
			Safe_Command: out event data port Command.Impl;
		properties
			AAHAA_Properties::Component_Type => SAFETY_CONTROLLER;
		annex agree {**
			guarantee Safe_Ctrl "Safety controller will always bring aircraft to an immediate stop" : Safe_Command.Speed = 0;
		**};
		annex resolute {**
			-- provably correct synthesis of high-assurance monitor
			prove (High_Assurance_Controller(this, "Safe_Ctrl"))
		**};
	end Safety_Controller;
	
	system implementation Safety_Controller.Impl
	end Safety_Controller.Impl;
	
	
	system Unsafe_Controller
		features
			Unsafe_Command: out event data port Command.Impl;
		properties
			AAHAA_Properties::Component_Type => CONTROLLER;
		annex agree {**
			guarantee "Unsafe controller will maintain constant speed" : Unsafe_Command.Speed = 1;
		**};
	end Unsafe_Controller;
	
	system implementation Unsafe_Controller.Impl
	end Unsafe_Controller.Impl;
	
	
	system Switch
		features
			Safety_Trigger: in event data port Base_Types::Boolean;
			Control_Command: in event data port Command.Impl;
			Safe_Command: in event data port Command.Impl;
			Switch_Command: out event data port Command.Impl;
		properties
			AAHAA_Properties::Component_Type => SWITCH;
		annex agree {**
			guarantee Safety_Switch "Safety switch functions correctly" : if Safety_Trigger = false then Switch_Command = Control_Command else Switch_Command = Safe_Command;
		**};
		annex resolute {**
			-- provably correct synthesis of high-assurance monitor
			prove (High_Assurance_Switch(this, "Safety_Switch"))
		**};
	end Switch;
	
	system implementation Switch.Impl
	end Switch.Impl;
	
	
	system Alert
		features
			Alert: in event data port Base_Types::boolean;
	end Alert;
	
	system implementation Alert.Impl
		properties
			AAHAA_Properties::Alert_Type => (PILOT);
	end Alert.Impl;
	
	
	system Deep_Taxi
		features
			IRS_Heading: in event data port Base_Types::Float;
			IRS_CTE: in event data port Base_Types::Float;
			CAM_VIDEO: in event data port;
			Aircraft_Command: out event data port Command.Impl;
		annex agree {**
			assume "Aircraft is currently on runway" : IRS_CTE < HALF_RUNWAY_WIDTH;
			guarantee "Steering command will not cause the aircraft to drive off the runway" : SAFE_COMMAND(IRS_Heading, IRS_CTE, Aircraft_Command);
		**};
		
	end Deep_Taxi;
	
	
	system implementation Deep_Taxi.Impl 
		subcomponents
			CNN: system Deep_Taxi_CNN.Impl;
			Smoother: system DSP_Smoother.Impl;
			Monitor: system Monitor.Impl;
			Controller: system Controller.Impl;
			Safety: system Safety_Controller.Impl;
			Switch: system Switch.Impl;
			Alert: system Alert.Impl;
		connections
			c1: port IRS_Heading -> Monitor.Actual_Heading;
			c2: port IRS_CTE -> Monitor.Actual_CTE;
			c3: port CAM_Video -> CNN.Video;
			c4: port CNN.Raw_CTE -> Smoother.Raw_CTE;
			c5: port CNN.Raw_Heading -> Smoother.Raw_Heading;
			c6: port Smoother.Smoothed_CTE -> Monitor.Estimated_CTE;
			c7: port Smoother.Smoothed_Heading -> Monitor.Estimated_Heading;
			c8: port Smoother.Smoothed_CTE -> Controller.CTE;
			c9: port Smoother.Smoothed_Heading -> Controller.Heading;
			c10: port Controller.Control_Command -> SWITCH.Control_Command;
			c11: port Safety.Safe_Command -> Switch.Safe_Command;
			c12: port Monitor.Alert -> Switch.Safety_Trigger;
			c13: port Monitor.Alert -> Alert.Alert;
			c14: port Switch.Switch_Command -> Aircraft_Command;
			
			annex agree {**
				assert "Controller always outputs positive speed" : Controller.Control_Command.Speed = 1;
				assert "Monitor condition implies safe CTL command" : MONITOR_CONDITION(IRS_Heading, Monitor.Estimated_Heading, IRS_CTE, Monitor.Estimated_CTE) => SAFE_COMMAND(IRS_Heading, IRS_CTE, Controller.Control_Command);
			**};
			
			annex resolute {**
				-- Systems containing LECs must have a simplex architecture
				prove(LEC_Simplex(this))
			**};
		
	end Deep_Taxi.Impl;
	
	system implementation Deep_Taxi.Fail
		subcomponents
			CNN: system Deep_Taxi_CNN.Impl;
			Smoother: system DSP_Smoother.Impl;
			Monitor: system Monitor.Impl;
			Controller: system Controller.Impl;
			Unsafe: system Unsafe_Controller.Impl;
			Switch: system Switch.Impl;
			Alert: system Alert.Impl;
		connections
			c1: port IRS_Heading -> Monitor.Actual_Heading;
			c2: port IRS_CTE -> Monitor.Actual_CTE;
			c3: port CAM_Video -> CNN.Video;
			c4: port CNN.Raw_CTE -> Smoother.Raw_CTE;
			c5: port CNN.Raw_Heading -> Smoother.Raw_Heading;
			c6: port Smoother.Smoothed_CTE -> Monitor.Estimated_CTE;
			c7: port Smoother.Smoothed_Heading -> Monitor.Estimated_Heading;
			c8: port Smoother.Smoothed_CTE -> Controller.CTE;
			c9: port Smoother.Smoothed_Heading -> Controller.Heading;
			c10: port Controller.Control_Command -> SWITCH.Control_Command;
			c11: port Unsafe.Unsafe_Command -> Switch.Safe_Command;
			c12: port Monitor.Alert -> Switch.Safety_Trigger;
			c13: port Monitor.Alert -> Alert.Alert;
			c14: port Switch.Switch_Command -> Aircraft_Command;
			
			annex agree {**
				assert "Controller always outputs positive speed" : Controller.Control_Command.Speed = 1;
				assert "Monitor condition implies safe CTL command" : MONITOR_CONDITION(IRS_Heading, Monitor.Estimated_Heading, IRS_CTE, Monitor.Estimated_CTE) => SAFE_COMMAND(IRS_Heading, IRS_CTE, Controller.Control_Command);
			**};
			
			annex resolute {**
				-- Systems containing LECs must have a simplex architecture
				prove(LEC_Simplex(this))
			**};
		
	end Deep_Taxi.Fail;
		
private

	annex agree {**
		
		const HALF_RUNWAY_WIDTH : real = 10.0;
		const ACCEPTABLE_HEADING_ERROR : real = 5.0;
		const ACCEPTABLE_CTE_ERROR : real = 1.0;
		
		-- Determines whether the specified command will result in the aircraft
		-- remaining on the runway, based on the current heading and CTE
		fun SAFE_COMMAND(Heading: real, CTE : real, Cmd : Command.Impl) : bool = 
			if Cmd.Speed = 0 then true
			else if Heading + Cmd.Heading >= -90.0 and Heading + Cmd.Heading <= 90.0 then
				if CTE + LINEAR_SIN(Heading + Cmd.Heading) < HALF_RUNWAY_WIDTH then true
				else false
			else false;
			
		fun MONITOR_CONDITION(Actual_Heading : real, Estimated_Heading : real, Actual_CTE : real, Estimated_CTE : real) : bool =
			abs(Actual_Heading - Estimated_Heading) <= ACCEPTABLE_HEADING_ERROR and abs(Actual_CTE - Estimated_CTE) <= ACCEPTABLE_CTE_ERROR;
	
		fun abs(num : real) : real = 
			if num >= 0.0 then num
			else -num;
			
		fun LINEAR_SIN(theta : real) : real =
			if theta >= -90.0 and theta < -85.0 then -1.0
			else if theta >= -85.0 and theta <-80.0 then -0.9962
			else if theta >= -80.0 and theta <-75.0 then -0.9848
			else if theta >= -75.0 and theta <-70.0 then -0.9659
			else if theta >= -70.0 and theta <-65.0 then -0.9397
			else if theta >= -65.0 and theta <-60.0 then -0.9063
			else if theta >= -60.0 and theta <-55.0 then -0.8660
			else if theta >= -55.0 and theta <-50.0 then -0.8192
			else if theta >= -50.0 and theta <-45.0 then -0.7660
			else if theta >= -45.0 and theta <-40.0 then -0.7071
			else if theta >= -40.0 and theta <-35.0 then -0.6428
			else if theta >= -35.0 and theta <-30.0 then -0.5736
			else if theta >= -30.0 and theta <-25.0 then -0.5
			else if theta >= -25.0 and theta <-20.0 then -0.4226
			else if theta >= -20.0 and theta <-15.0 then -0.3420
			else if theta >= -15.0 and theta <-10.0 then -0.2588
			else if theta >= -10.0 and theta <-5.0 then -0.1736
			else if theta >= -5.0 and theta < 0.0 then -0.0872
			else if theta = 0.0 then 0.0
			else if theta > 0.0 and theta <= 5.0 then 0.0872
			else if theta > 5.0 and theta <= 10.0 then 0.1736
			else if theta > 10.0 and theta <= 15.0 then 0.2588
			else if theta > 15.0 and theta <= 20.0 then 0.3420
			else if theta > 20.0 and theta <= 25.0 then 0.4226
			else if theta > 25.0 and theta <= 30.0 then 0.5
			else if theta > 30.0 and theta <= 35.0 then 0.5736
			else if theta > 35.0 and theta <= 40.0 then 0.6428
			else if theta > 40.0 and theta <= 45.0 then 0.7071
			else if theta > 45.0 and theta <= 50.0 then 0.7660
			else if theta > 50.0 and theta <= 55.0 then 0.8192
			else if theta > 55.0 and theta <= 60.0 then 0.8660
			else if theta > 60.0 and theta <= 65.0 then 0.9063
			else if theta > 65.0 and theta <= 70.0 then 0.9397
			else if theta > 70.0 and theta <= 75.0 then 0.9659
			else if theta > 75.0 and theta <= 80.0 then 0.9848
			else if theta > 80.0 and theta <= 85.0 then 0.9962
			else 1.0; --if theta > 85.0 and theta <= 90.0
	**};
	
	annex resolute {**
		
		-- The LEC was composed and analyzed properly	
		LEC_Assurance(c : component) <=
			** "LEC " c " will not result in unsafe operation" **
			Test_Input_Prioritization(c) and
			NN_Formal_Analysis(c) and 
			Safety_Aware_Constrained_Learning(c)
		
		-- Systems containing LECs must have a simplex architecture
--		LEC_Simplex(c : component) <=
--			** "Systems containing LECs must have a simplex architecture" **
--			Contains_LEC() => Is_Simplex_Architecture(c)
		
		-- Provably correct synthesis of high-assurance components
		High_Assurance_Monitor(c : component, prop : string) <=
			** "Monitor " c " implements property " prop **
			analysis("ToolCheck", "APT(Monitor, " + prop + ")")
			
		High_Assurance_Switch(c : component, prop : string) <=
			** "Switch " c " implements property " prop **
			analysis("ToolCheck", "APT(Switch, " + prop + ")")
			
		High_Assurance_Controller(c : component, prop : string) <=
			** "Controller " c " implements property " prop **
			analysis("ToolCheck", "APT(Controller, " + prop + ")")
		
		----------------
		-- SUB CLAIMS --
		----------------
		
		-- Systems containing LECs must have a simplex architecture
		LEC_Simplex(c : component) <=
			** "Systems containing LECs must have a simplex architecture" **
			Contains_LEC() => Is_Simplex_Architecture(c)
		
		-- Determines whether there is an LEC in this model
		Contains_LEC() : bool =
			exists (c : component) . (has_property(c, AAHAA_Properties::Component_Type) and 
										property(c, AAHAA_Properties::Component_Type) = "LEC")
		
		-- Determines if the current architecture is a simplex architecture
		Is_Simplex_Architecture(sys : component) <=
			** sys " is a simplex architecture" **
			let simplex_switches : [component] = Get_AAHAA_Components("SWITCH");
			let simplex_monitors : [component] = Get_AAHAA_Components("MONITOR");
			let safety_controllers : [component] = Get_AAHAA_Components("SAFETY_CONTROLLER");
			let controllers : [component] = Get_AAHAA_Components("CONTROLLER");
			
			Single_Output_Switch_Exists(sys, simplex_switches) and
			Switch_Not_Bypassed(head(controllers), head(simplex_switches), sys) and
			Monitor_Triggers_Switch(simplex_monitors, head(simplex_switches)) and
			Safety_Controller_On_Switch(head(simplex_switches)) and
			Agree_Properties_Checked()
			
		Agree_Properties_Checked() <=
			** "AGREE verification passes" **
			analysis("AgreeCheck")

		-- Returns a list of components with the specified AAHAA::Component_Type property
		Get_AAHAA_Components(comp_type : string) : [component] =
			[comp for (comp : component) | (has_property(comp, AAHAA_Properties::Component_Type) and property(comp, AAHAA_Properties::Component_Type) = comp_type)]
		
		Is_AAHAA_Component_Type(comp : component, comp_type : string) : bool =
			has_property(comp, AAHAA_Properties::Component_Type) and property(comp, AAHAA_Properties::Component_Type) = comp_type
		
		-- Checks whether a single switch exists that is connected to the system output
		Single_Output_Switch_Exists(sys : component, switches : [component]) <=
			** "Single simplex switch exists on output of " sys ** 
			let out_conns : {connection} = {conn for (conn : connections(sys)) | destination_component(conn) = sys};
			length(switches) = 1 and forall (conn : out_conns) . source_component(conn) = head(switches)

		-- Checks that the switch is triggered by a high-assurance monitor
		Monitor_Triggers_Switch(monitors : [component], switch : component) <=
			** "A high-assurance monitor triggers switch " switch **
			exists (m : as_set(monitors)) . (exists (conn : connections(m)) . destination_component(conn) = switch)

		-- Checks that a safety controller is connected to the switch
		Safety_Controller_On_Switch(switch : component) <=
			** "A safety controller is connected to switch " switch **
			exists (conn : connections(switch)) . Is_AAHAA_Component_Type(source_component(conn), "SAFETY_CONTROLLER")

		-- Checks that there is no path beteen the complex controller and the aircraft that doesn't pass through the switch
		Switch_Not_Bypassed(controller : component, switch : component, aircraft : component) <=
			** "A high-assurance switch cannot be bypassed" **
			let comps : {component} = reach(controller, switch);
			--length(comps) = 0 or 
			(not member(aircraft, reach(controller, switch)))

		Test_Input_Prioritization(c : component) <=
			** "Test inputs were generated for LEC " c **
			analysis("ToolCheck", "UofM")
			
		NN_Formal_Analysis(c : component) <=
			** "Closed-loop formal analysis was performed on " c **
			analysis("ToolCheck", "Marabou")
			
		Safety_Aware_Constrained_Learning(c : component) <=
			** "Open-loop formal analysis was performed on " c **
			analysis("ToolCheck", "?")
			
		reach(c : component, stop_at : component) : {component} =
			recusive_reach({c}, stop_at)

		recusive_reach(curr: {component}, stop_at : component) : {component} =
			let next : {component} = union(curr, next_reach(curr, stop_at));
			if next = curr then curr else recusive_reach(next, stop_at)
			
		next_reach(curr : {component}, stop_at : component) : {component} =
			{y for (x : curr) (y : reachable_components(x, stop_at))}
			
		reachable_components(comp : component, stop_at : component) : {component} =
			{c for (conn : connections(comp)) (c : reachable_components_via_connection(comp, conn, stop_at))}
		
		reachable_components_via_connection(comp : component, conn : connection, stop_at : component) : {component} =
			-- a direct port connection
			let c : {component} =
			if is_port_connection(conn) then
				if source_component(conn) = comp then 
					{destination_component(conn)} 
				else {}
			-- a component reading from 'comp' as a data component via read access on 'conn'
			else if comp instanceof data then
				if comp = source(conn) then
					{destination_component(conn)}
				else if comp = destination(conn) then
					{source_component(conn)}
				else
					{}
			-- 'comp' writing to a data component via write access on 'conn'
			else if destination(conn) instanceof data then
				{destination_component(conn)}
			else if source(conn) instanceof data then
				{source_component(conn)}
			-- Other connections unsupported at this time
			else
				{};
			if length(c) > 0 and head(as_list(c)) = stop_at then {} else c
		
	**};
	
end Deep_Taxi;