package Collision_Avoidance
public
	with AAHAA_Properties;
	
	with Base_Types;

	annex agree {**
		fun IS_SOURCE_LEC(P: Base_Types::Boolean) : bool = (P = true);
		fun IS_SOURCE_BAF(P: Base_Types::Boolean) : bool = not IS_SOURCE_LEC(P);
		uninterpreted CALC_INTRUDER_TRAJECTORY(ADSB: Vehicle_State.Impl) : Vehicle_State.Impl;
		uninterpreted CALC_TRAJECTORY(S: Vehicle_State.Impl, D: Vehicle_State.Impl, IS_LEC: bool) : Vehicle_State_And_Plan_Source.Impl;
		uninterpreted ASSESS_TRAJECTORY(Own: Vehicle_State_And_Plan_Source.Impl, Intruder: Vehicle_State.Impl) : Plan_Assessment.Impl;
		fun CONTAINS_LEC_TRAJECTORY(T: Vehicle_State_And_Plan_Source.Impl[2]) : bool = 
			exists i in T, (IS_SOURCE_LEC(i.Plan_Source));
		fun CONTAINS_BAF_TRAJECTORY(T: Vehicle_State_And_Plan_Source.Impl[2]) : bool = 
			exists i in T, (IS_SOURCE_BAF(i.Plan_Source));
		fun CONTAINS_LEC_ASSESSMENT(T: Plan_Assessment.Impl[2]) : bool = 
			exists i in T, (IS_SOURCE_LEC(i.Plan_Source));
		fun CONTAINS_BAF_ASSESSMENT(T: Plan_Assessment.Impl[2]) : bool = 
			exists i in T, (IS_SOURCE_BAF(i.Plan_Source));
		uninterpreted IS_BETTER_MANUEVER(A: Vehicle_State.Impl, B: Vehicle_State.Impl) : bool;
		uninterpreted IS_BETTER_PLAN_ASSESSMENT(A: Plan_Assessment.Impl, B: Plan_Assessment.Impl) : bool;
		fun SELECT_PLAN(A: Vehicle_State.Impl, B: Vehicle_State.Impl, S: Base_Types::Boolean) : Vehicle_State.Impl =
			if S then B else A;		
	**};
		
	
	data Vehicle_State
	end Vehicle_State;
	
	data implementation Vehicle_State.Impl
		subcomponents
			x: data Base_Types::Float;
			y: data Base_Types::Float;
			speed: data Base_Types::Float;
	end Vehicle_State.Impl;
	
	data Vehicle_State_And_Plan_Source
	end Vehicle_State_And_Plan_Source;
	
	data implementation Vehicle_State_And_Plan_Source.Impl
		subcomponents
			State: data Vehicle_State.Impl;
			Plan_Source: data Base_Types::Boolean;
	end Vehicle_State_And_Plan_Source.Impl;
	
	data Plan_Assessment
	end Plan_Assessment;
	
	data implementation Plan_Assessment.Impl
		subcomponents
			TCPA: data Base_Types::Integer;
			PMD: data Base_Types::Float;
			Plan_Safe: data Base_Types::Boolean;
			Plan_Valid: data Base_Types::Boolean;
			Plan_Source: data Base_Types::Boolean;
	end Plan_Assessment.Impl;

	system Collision_Avoidance
		features
			ADSB: in event data port Vehicle_State.Impl;
			STATE: in event data port Vehicle_State.Impl;
			Plan_Manuever: out event data port Vehicle_State.Impl;
	end Collision_Avoidance;

	system implementation Collision_Avoidance.Impl
		subcomponents
			DAA: process DAA.Impl;
			LEC: process LEC.Impl;
			High_Assurance_System: system High_Assurance_System.Impl;
			Plan_Switch: process Plan_Switch.Impl;
			AE_Lite: process AE_Lite.Impl;
		connections
			c1: port ADSB -> DAA.ADSB;
			c2: port DAA.BAF_Manuever -> LEC.BAF_Manuever;
			c3: port DAA.BAF_Manuever -> Plan_Switch.BAF_Manuever;
			c4: port LEC.LEC_Manuever -> Plan_Switch.LEC_Manuever;
			c5: port STATE -> LEC.STATE;
			c6: port STATE -> High_Assurance_System.STATE;
			c7: port DAA.BAF_Manuever -> High_Assurance_System.BAF_Manuever;
			c8: port LEC.LEC_Manuever -> High_Assurance_System.LEC_Manuever;
			c9: port ADSB -> High_Assurance_System.ADSB;
			c10: port Plan_Switch.Plan_Decision -> AE_Lite.Plan_Decision;
			c11: port AE_Lite.Plan_Manuever -> Plan_Manuever;
			c12: port High_Assurance_System.Selected_Plan -> Plan_Switch.Selected_Plan;
--			c13: port LEC.LEC_Manuever -> DAA.LEC_Manuever;
		annex resolute {**
			prove (G1(this, this.High_Assurance_System, this.Plan_Switch, this.LEC))
		**};
	end Collision_Avoidance.Impl;
	
	system High_Assurance_System
		features
			ADSB: in event data port Vehicle_State.Impl;
			STATE: in event data port Vehicle_State.Impl;
			LEC_Manuever: in event data port Vehicle_State.Impl;
			BAF_Manuever: in event data port Vehicle_State.Impl;
			Selected_Plan: out event data port Base_Types::Boolean;
		properties
			AAHAA_Properties::Component_Type => High_Assurance_System;
			
		annex agree {**
			guarantee High_Assurance_System_Selects_Optimal_Plan "High Assurance System selects the better of the BAF and LEC manuevers" :
				if event(BAF_Manuever) and event(LEC_Manuever) and event(STATE) and event(ADSB)
					then event(Selected_Plan) and Selected_Plan = IS_BETTER_MANUEVER(LEC_Manuever, BAF_Manuever)
					else not event(Selected_Plan);
		**};
	end High_Assurance_System;
	
	system implementation High_Assurance_System.Impl
		subcomponents
			Collins_Run_Time_Assurance: process Collins_Run_Time_Assurance.Impl;
			Kestrel_Logic: process Kestrel_Logic.Impl;
		connections
			c1: port Collins_Run_Time_Assurance.Plan_Assessment -> Kestrel_Logic.Plan_Assessment;
			c2: port Kestrel_Logic.Selected_Plan -> Selected_Plan;
			c3: port ADSB -> Collins_Run_Time_Assurance.ADSB;
			c4: port STATE -> Collins_Run_Time_Assurance.STATE;
			c5: port LEC_Manuever -> Collins_Run_Time_Assurance.LEC_Manuever;
			c6: port BAF_Manuever -> Collins_Run_Time_Assurance.BAF_Manuever;
		annex agree {**
			lemma LEMMA_MANUEVER "If plan A is better than B, than plan B cannot be better than A" :
				IS_BETTER_MANUEVER(LEC_Manuever, BAF_Manuever) => not IS_BETTER_MANUEVER(BAF_Manuever, LEC_Manuever) and
				IS_BETTER_MANUEVER(BAF_Manuever, LEC_Manuever) => not IS_BETTER_MANUEVER(LEC_Manuever, BAF_Manuever);	
		**};
	end High_Assurance_System.Impl;
	
	process DAA
		features
			ADSB: in event data port Vehicle_State.Impl;
			BAF_Manuever: out event data port Vehicle_State.Impl;
			LEC_Manuever: in event data port Vehicle_State.Impl;
	end DAA;

	process implementation DAA.Impl
		subcomponents
			Avoidance_Alert: thread Avoidance_Alert.Impl;
			BAF: thread BAF.Impl;
		connections
			c1: port ADSB -> Avoidance_Alert.ADSB;
			c2: port Avoidance_Alert.Alert -> BAF.Alert;
			c3: port BAF.BAF_Manuever -> BAF_Manuever;
	end DAA.Impl;
	
	thread Avoidance_Alert
		features
			ADSB: in event data port Vehicle_State.Impl;
			Alert: out event data port Base_Types::Boolean;
	end Avoidance_Alert;
	
	thread implementation Avoidance_Alert.Impl
	end Avoidance_Alert.Impl;
	
	thread BAF
		features
			BAF_Manuever: out event data port Vehicle_State.Impl;
			Alert: in event data port Base_Types::Boolean;
	end BAF;
	
	thread implementation BAF.Impl
	end BAF.Impl;
	
	process Plan_Switch
		features
			BAF_Manuever: in event data port Vehicle_State.Impl;
			LEC_Manuever: in event data port Vehicle_State.Impl;
			Plan_Decision: out event data port Vehicle_State.Impl;
			Selected_Plan: in event data port Base_Types::Boolean {AAHAA_Properties::Control_Port => true;};
		properties
			AAHAA_Properties::Component_Type => Plan_Switch;
		annex agree {**
			guarantee Plan_Switch_Selects_Optimal_Plan "Plan Switch selects the better of the BAF and LEC manuevers based on Kestrel Logic input" : 
				if event(BAF_Manuever) and event(LEC_Manuever) and event(Selected_Plan)
					then event(Plan_Decision) and Plan_Decision = SELECT_PLAN(BAF_Manuever, LEC_Manuever, Selected_Plan)
					else not event(Plan_Decision);
		**};
	end Plan_Switch;
	
	process implementation Plan_Switch.Impl
	end Plan_Switch.Impl;
	
	process AE_Lite
		features
			Plan_Manuever: out event data port Vehicle_State.Impl;
			Plan_Decision: in event data port Vehicle_State.Impl;
	end AE_Lite;
	
	process implementation AE_Lite.Impl
	end AE_Lite.Impl;
	
	process LEC
		features
			STATE: in event data port Vehicle_State.Impl;
			BAF_Manuever: in event data port Vehicle_State.Impl;
			LEC_Manuever: out event data port Vehicle_State.Impl;
	end LEC;
	
	process implementation LEC.Impl
	end LEC.Impl;
	
	process Collins_Run_Time_Assurance
		features
			ADSB: in event data port Vehicle_State.Impl;
			BAF_Manuever: in event data port Vehicle_State.Impl;
			LEC_Manuever: in event data port Vehicle_State.Impl;
			STATE: in event data port Vehicle_State.Impl;
			Plan_Assessment: out event data port Plan_Assessment.Impl[2];
		annex agree {**
			guarantee Collins_RTA_Delivers_Plan_Assessments "Collins RTA delivers assessments for the received BAF and LEC manuevers" :
				if event(BAF_Manuever) and event(LEC_Manuever) and event(STATE) and event(ADSB)
					then event(Plan_Assessment) and CONTAINS_BAF_ASSESSMENT(Plan_Assessment) and CONTAINS_LEC_ASSESSMENT(Plan_Assessment)
					else not event(Plan_Assessment);			
		**};
		
	end Collins_Run_Time_Assurance;

	process implementation Collins_Run_Time_Assurance.Impl
		subcomponents
			Intruder_Trajectory: thread Intruder_Trajectory.Impl;
			Own_Ship_Trajectory: thread Own_Ship_Trajectory.Impl;
			SWC_Assessment: thread SWC_Assessment.Impl;
		connections
			c1: port ADSB -> Intruder_Trajectory.ADSB;
			c2: port Intruder_Trajectory.Intruder_Trajectory -> SWC_Assessment.Intruder_Trajectory;
			c3: port Own_Ship_Trajectory.Own_Ship_Trajectory -> SWC_Assessment.Own_Ship_Trajectory;
			c4: port STATE -> Own_Ship_Trajectory.STATE;
			c5: port BAF_Manuever -> Own_Ship_Trajectory.BAF_Manuever;
			c6: port LEC_Manuever -> Own_Ship_Trajectory.LEC_Manuever;
			c7: port SWC_Assessment.Plan_Assessment -> Plan_Assessment;
	end Collins_Run_Time_Assurance.Impl;
	
	thread Intruder_Trajectory
		features
			ADSB: in event data port Vehicle_State.Impl;
			Intruder_Trajectory: out event data port Vehicle_State.Impl;
		annex agree {**
			guarantee IST_Delivers_Trajectory "IST delivers intruder trajectory for the received ADSB information" :
				if event(ADSB) then event(Intruder_Trajectory) and Intruder_Trajectory = CALC_INTRUDER_TRAJECTORY(ADSB) else not event(Intruder_Trajectory);
		**};
	end Intruder_Trajectory;
	
	thread implementation Intruder_Trajectory.Impl
	end Intruder_Trajectory.Impl;
	
	thread Own_Ship_Trajectory
		features
			STATE: in event data port Vehicle_State.Impl;
			BAF_Manuever: in event data port Vehicle_State.Impl;
			LEC_Manuever: in event data port Vehicle_State.Impl;
			Own_Ship_Trajectory: out event data port Vehicle_State_And_Plan_Source.Impl[2];
		annex agree {**
			guarantee OST_Delivers_Trajectories "OST delivers trajectories for the received BAF and LEC manuevers" :
				if event(STATE) and event(BAF_Manuever) and event(LEC_Manuever)
					then event(Own_Ship_Trajectory) and Own_Ship_Trajectory[1] = CALC_TRAJECTORY(STATE, BAF_Manuever, false) and Own_Ship_Trajectory[2] = CALC_TRAJECTORY(STATE, LEC_Manuever, true)
					else not event(Own_Ship_Trajectory);
		**};
	end Own_Ship_Trajectory;
	
	thread implementation Own_Ship_Trajectory.Impl
	end Own_Ship_Trajectory.Impl;
	
	thread SWC_Assessment
		features
			Intruder_Trajectory: in event data port Vehicle_State.Impl;
			Own_Ship_Trajectory: in event data port Vehicle_State_And_Plan_Source.Impl[2];
			Plan_Assessment: out event data port Plan_Assessment.Impl[2];
		annex agree {**
			guarantee SWC_Assesment_Delivers_Plan_Assessments "SWC_Assessment delivers assessments for the received BAF and LEC manuevers" :
				if event(Intruder_Trajectory) and event(Own_Ship_Trajectory)
					then event(Plan_Assessment) and Plan_Assessment[1] = ASSESS_TRAJECTORY(Own_Ship_Trajectory[1], Intruder_Trajectory) and Plan_Assessment[2] = ASSESS_TRAJECTORY(Own_Ship_Trajectory[2], Intruder_Trajectory)
					else not event(Plan_Assessment);
		**};
	end SWC_Assessment;
	
	thread implementation SWC_Assessment.Impl
	end SWC_Assessment.Impl;

	process Kestrel_Logic
		features
			Plan_Assessment: in event data port Plan_Assessment.Impl[2];
			Selected_Plan: out event data port Base_Types::Boolean;
		annex agree {**
			guarantee Kestrel_Logic_Selects_Optimal_Plan "Kestrel Logic selects the better of the BAF and LEC manuevers" :
			if event(Plan_Assessment)
				then event(Selected_Plan) and Selected_Plan = IS_BETTER_PLAN_ASSESSMENT(Plan_Assessment[2], Plan_Assessment[1])
				else not event(Selected_Plan);
		**};
	end Kestrel_Logic;
	
	process implementation Kestrel_Logic.Impl
		subcomponents
			Plan_Selector: thread Plan_Selector.Impl;
		connections
			c1: port Plan_Assessment -> Plan_Selector.Plan_Assessment;
			c2: port Plan_Selector.Selected_Plan -> Selected_Plan;
--		annex agree {**
--			assert if event(Plan_Assessment)
--				then event(Selected_Plan) and Selected_Plan = IS_BETTER_PLAN_ASSESSMENT(Plan_Assessment[2], Plan_Assessment[1])
--				else not event(Selected_Plan);
--		**};
	end Kestrel_Logic.Impl;
	
	thread Plan_Selector
		features
			Plan_Assessment: in event data port Plan_Assessment.Impl[2];
			Selected_Plan: out event data port Base_Types::Boolean;
		annex agree {**
			guarantee Plan_Selector_Selects_Optimal_Plan "Plan Selector selects the better of the BAF and LEC manuevers" :
			if event(Plan_Assessment)
				then event(Selected_Plan) and Selected_Plan = IS_BETTER_PLAN_ASSESSMENT(Plan_Assessment[2], Plan_Assessment[1])
				else not event(Selected_Plan);
		**};
	end Plan_Selector;
	
	thread implementation Plan_Selector.Impl
	end Plan_Selector.Impl;
	
	annex resolute {**
			
		-- Top-level claim
 		goal G1(Collision_Avoidance : component, High_Assurance_System : component, Plan_Switch : component, LEC : component) <=
 			** "Collision avoidance monitor ensures a safe flight plan is published" **
 			S1(Collision_Avoidance, High_Assurance_System, Plan_Switch, LEC)
 		
 		strategy S1(Collision_Avoidance : component, High_Assurance_System : component, Plan_Switch : component, LEC : component) <=
 			** "Argue based on RTA" **
 			G2() and G3() and G4(Collision_Avoidance, High_Assurance_System, Plan_Switch, LEC)
 			
 		goal G2() <=
 			** "Unsafe flight plan can be detected when it occurs" **
			S2()
			
		strategy S2() <=
			** "Model-based Decomposition" **
			G5() and G6()
			
		goal G5() <=
 			** "Implementation is correct" **
 			strategy S5: "DO-178C";
 			G7()
 			
 		goal G7() <=
 			** "Verified by testing" **
			solution Sln7: "Component verified by testing"
			
		goal G6() <=
 			** "Run time monitor requirements are correct" **
			S6()
			
		strategy S6() <=
			** "Simulation" **
			G8()
			
		goal G8() <=
 			** "Verified by Matlab Simulation" **
			solution Sln8: "Component verified by simulation"
			
		goal G16(Collision_Avoidance : component) <=
 			** "High assurance component exists" **
 			-- Evidence that run time assurance monitor exists
 			exists(c : subcomponents(Collision_Avoidance)) . (is_monitor(c)) 
 		
 		goal G4(Collision_Avoidance : component, High_Assurance_System : component, Plan_Switch : component, LEC : component) <=
 			** "The architecture is correct" **
 			strategy S4: "Model-based decomposition";
 			G14() and G15() and G16(Collision_Avoidance) and G17() and G18(High_Assurance_System, Plan_Switch) and G19(High_Assurance_System, Plan_Switch, LEC)
 		
 		goal G14() <=
 			** "Requirements are correct" **
			solution Sln14: "Verified by review" 
 			
 		goal G15() <=
 			** "Requirements verified in AADL model" **
			solution Sln15: "Verified by review"
			
		goal G17() <=
 			** "Flight plan selection mechanism exists" **
			solution Sln17: "Verified by review"
			
		goal G18(High_Assurance_System : component, Plan_Switch : component) <=
 			** "Monitor controls the switch" **
			exists_monitor_switch_control(High_Assurance_System, Plan_Switch) 
		
		goal G19(High_Assurance_System : component, Plan_Switch : component, LEC : component) <=
 			** "LEC output is only connected to monitor and switch" **	
			exists_lec_monitor_connection(High_Assurance_System, LEC) and exists_lec_plan_switch_connection(Plan_Switch, LEC) and not_exists_lec_other_connection(LEC)
			
		goal G3() <=
 			** "Unsafe flight plan is detected and corrective actions are taken" **
 			strategy S3: "Model-based decomposition";
 			G9() and G10()
 			
 		goal G9() <=
 			** "Flight plan assessment mechanism is implemented correctly" **
 			strategy S7: "Formal synthesis";
 			G11()
 			
 		goal G11() <=
 			** "APT tool was used to synthesize implementation of" **
			solution Sln115: "Component synthesized by APT tool"
		
		goal G10() <=
 			** "Flight plan assessment mechanism will result in safe flight" **
 			strategy S8: "Reason over SWC Assessment";
 			G12() or G13()
 			
 		goal G12() <=
 			** "Publish LEC flight plan if it is safe " **
			solution Sln12: "Verified using testing"
			
		goal G13() <=
 			** "Publish BAF flight plan if it is safe " **
			solution Sln13: "Verified using testing"
			
		is_monitor(comp : component) : bool = 
 			has_property(comp, AAHAA_Properties::Component_Type) and property(comp, AAHAA_Properties::Component_Type) = "High_Assurance_System"
 			
		exists_monitor_switch_control(High_Assurance_System : component, Plan_Switch : component) : bool =
			exists(conn : connections (Plan_Switch)) . (is_source_component(conn, High_Assurance_System) and existsProperty(conn))
			
		existsProperty(conn : connection) : bool = 
			has_property(destination(conn), AAHAA_Properties::Control_Port) and property(destination(conn), AAHAA_Properties::Control_Port)
		
		exists_lec_monitor_connection(High_Assurance_System : component, LEC : component) : bool =
			exists(conn : connections (LEC)) . (is_destination_component(conn, High_Assurance_System))
--			let srcs : {component} = {c for (conn : connections(LEC)) (c : destination_component(conn)) | name(destination_component(conn)) = name(Plan_Switch)};
--			let b: bool = debug ("sources= ", srcs);
--			b  
		
		exists_lec_plan_switch_connection(Plan_Switch : component, LEC : component) : bool =
			exists(conn : connections (LEC)) . (name(destination_component(conn)) = name(Plan_Switch))
			
		not_exists_lec_other_connection(LEC : component) : bool =
			let srcs : {component} = {c for (conn : connections(LEC)) (c : destination_component(conn)) | not (name(destination_component(conn)) = name(LEC))};
			length(srcs) = 2
			
	**};
	
end Collision_Avoidance;
